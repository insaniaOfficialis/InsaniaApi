// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230925122341_Init_2")]
    partial class Init_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.General.File.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Extention")
                        .HasColumnType("text")
                        .HasColumnName("extention")
                        .HasComment("Расширение файла");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование файла");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Тип файла");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("re_files", t =>
                        {
                            t.HasComment("Файлы");
                        });
                });

            modelBuilder.Entity("Domain.Entities.General.File.FileType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path")
                        .HasComment("Путь к диретории");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_file_types", t =>
                        {
                            t.HasComment("Типы файлов");
                        });
                });

            modelBuilder.Entity("Domain.Entities.General.File.FileUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_id")
                        .HasComment("Файл");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasComment("Пользователь");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("un_users_files", t =>
                        {
                            t.HasComment("Связь файлов с пользователями");
                        });
                });

            modelBuilder.Entity("Domain.Entities.General.System.Parametr", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value")
                        .HasComment("Значение");

                    b.HasKey("Id");

                    b.ToTable("dir_parameters", t =>
                        {
                            t.HasComment("Параметры");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Geography.GeographicalObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id")
                        .HasComment("Ссылка на родительский географический объект");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Ссылка на тип географического объекта");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("dir_geographical_objects", t =>
                        {
                            t.HasComment("Географические объекты");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Geography.TypeGeographicalObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_types_geographical_objects", t =>
                        {
                            t.HasComment("Типы географических объектов");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Politics.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color")
                        .HasComment("Цвет на карте");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id")
                        .HasComment("Ссылка на страну");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<long>("FractionId")
                        .HasColumnType("bigint")
                        .HasColumnName("fraction_id")
                        .HasComment("Ссылка на фракцию");

                    b.Property<long>("GeographicalObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("geographical_object_id")
                        .HasComment("Ссылка на географический объект");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number")
                        .HasComment("Номер на карте");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id")
                        .HasComment("Ссылка на регион");

                    b.Property<int>("SizeInPixels")
                        .HasColumnType("integer")
                        .HasColumnName("size_in_pixels")
                        .HasComment("Размер в пикселях");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FractionId");

                    b.HasIndex("GeographicalObjectId");

                    b.HasIndex("RegionId");

                    b.ToTable("dir_areas", t =>
                        {
                            t.HasComment("Области");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Politics.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("LanguageForNames")
                        .HasColumnType("text")
                        .HasColumnName("language_for_names")
                        .HasComment("Язык для названий");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number")
                        .HasComment("Номер на карте");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_countries", t =>
                        {
                            t.HasComment("Страны");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Politics.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number")
                        .HasComment("Номер на карте");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_regions", t =>
                        {
                            t.HasComment("Регионы");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sociology.Fraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_fractions", t =>
                        {
                            t.HasComment("Фракции");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sociology.Nation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("LanguageForPersonalNames")
                        .HasColumnType("text")
                        .HasColumnName("language_for_personal_names")
                        .HasComment("Язык для имён");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("race_id")
                        .HasComment("Ссылка на расу");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("dir_nations", t =>
                        {
                            t.HasComment("Нации");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sociology.NationPersonalName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<double>("Probability")
                        .HasColumnType("double precision")
                        .HasColumnName("probability")
                        .HasComment("Вероятность выпадения");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("un_nations_personal_names", t =>
                        {
                            t.HasComment("Связь наций с именами");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sociology.PersonalName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_personal_names", t =>
                        {
                            t.HasComment("Имена");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sociology.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_races", t =>
                        {
                            t.HasComment("Расы");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sys_roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.ToTable("RoleClaims", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sys_users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("UserClaims", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("UserLogins", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("sys_users_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.ToTable("UserTokens", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identification.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<long>");

                    b.ToTable(t =>
                        {
                            t.HasComment("Роли");
                        });

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Domain.Entities.Identification.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<long>");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasComment("Имя");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasComment("Признак заблокированного пользователя");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasComment("Фамилия");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasComment("Отчество");

                    b.ToTable(t =>
                        {
                            t.HasComment("Пользователи");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Domain.Entities.General.File.File", b =>
                {
                    b.HasOne("Domain.Entities.General.File.FileType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.General.File.FileUser", b =>
                {
                    b.HasOne("Domain.Entities.General.File.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identification.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Geography.GeographicalObject", b =>
                {
                    b.HasOne("Domain.Entities.Geography.GeographicalObject", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Entities.Geography.TypeGeographicalObject", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Politics.Area", b =>
                {
                    b.HasOne("Domain.Entities.Politics.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sociology.Fraction", "Fraction")
                        .WithMany()
                        .HasForeignKey("FractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Geography.GeographicalObject", "GeographicalObject")
                        .WithMany()
                        .HasForeignKey("GeographicalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Politics.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Fraction");

                    b.Navigation("GeographicalObject");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.Sociology.Nation", b =>
                {
                    b.HasOne("Domain.Entities.Sociology.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });
#pragma warning restore 612, 618
        }
    }
}
